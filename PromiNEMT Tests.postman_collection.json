{
	"info": {
		"_postman_id": "91cc9fed-7b4b-4aec-bd1d-3b2eceaf4efd",
		"name": "PromiNEMT Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "273897"
	},
	"item": [
		{
			"name": "Authorization",
			"item": []
		},
		{
			"name": "User",
			"item": [
				{
					"name": "GetUserById",
					"item": [
						{
							"name": "GetUserById - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Item has Id \" + pm.environment.get(\"defaultId\"), function () {\r",
											"    pm.expect(pm.response.json().data.id).to.eql(parseInt(pm.environment.get(\"defaultId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no errors\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/{{defaultId}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"{{defaultId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserById - Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response data is NULL\", function () {     \r",
											"    pm.expect(pm.response.json().data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has 1 error\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);    \r",
											"});\r",
											"\r",
											"pm.test(\"ID error message\", function () { \r",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Id is not valid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/{{invalidId}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserById - Non-existing Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () { \r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response data is NULL\", function () {     \r",
											"    pm.expect(pm.response.json().data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no errors\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eql(0);    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/{{nonExistingId}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"{{nonExistingId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetUserByExternalId",
					"item": [
						{
							"name": "GetUserByExternalId - Success - LowerCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Item has ExternalId \" + pm.environment.get(\"defaultExternalIdLC\"), function () {\r",
											"    pm.expect(pm.response.json().data.externalId.toLowerCase()).to.eq(pm.environment.get(\"defaultExternalIdLC\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no errors\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/ext/{{defaultExternalIdLC}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"ext",
										"{{defaultExternalIdLC}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByExternalId - Success - UpperCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Item has ExternalId \" + pm.environment.get(\"defaultExternalIdUC\"), function () {\r",
											"    pm.expect(pm.response.json().data.externalId).to.eq(pm.environment.get(\"defaultExternalIdUC\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no errors\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/ext/{{defaultExternalIdUC}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"ext",
										"{{defaultExternalIdUC}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByExternalId - Invalid ExternalId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response data is NULL\", function () {     \r",
											"    pm.expect(pm.response.json().data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eql(2);    \r",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Id must be 36 characters.\");\r",
											"    pm.expect(pm.response.json().errors[1].message).to.eql(\"Id is not valid.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/ext/{{invalidExternalId}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"ext",
										"{{invalidExternalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByExternalId - Non-existing ExternalId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () { \r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response data is NULL\", function () {     \r",
											"    pm.expect(pm.response.json().data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no errors\", function () {     \r",
											"    pm.expect(pm.response.json().errors.length).to.eq(0);    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminApiUrl}}/users/ext/{{nonExistingExternalId}}",
									"host": [
										"{{adminApiUrl}}"
									],
									"path": [
										"users",
										"ext",
										"{{nonExistingExternalId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetUsers",
					"item": []
				},
				{
					"name": "CreateUser",
					"item": []
				},
				{
					"name": "UpdateUser",
					"item": []
				},
				{
					"name": "DeleteUser",
					"item": []
				}
			]
		}
	]
}