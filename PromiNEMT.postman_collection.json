{
	"info": {
		"_postman_id": "91cc9fed-7b4b-4aec-bd1d-3b2eceaf4efd",
		"name": "PromiNEMT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "273897"
	},
	"item": [
		{
			"name": "Authorization",
			"item": []
		},
		{
			"name": "User",
			"item": [
				{
					"name": "GetUserById",
					"item": [
						{
							"name": "GetUserById - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Item has Id \" + pm.environment.get(\"defaultId\"), function () {\r",
											"    pm.expect(jsonData.id.toUpperCase()).to.eql(pm.environment.get(\"idDefault\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserById - Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has error\", function () {\r",
											"    pm.expect(jsonData.errors.length).to.eql(1);\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"The specified condition was not met for 'Id'.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idInvalid}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idInvalid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserById - Non-existing Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response has empty body\", function () { \r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idNonExisting}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idNonExisting}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetUserByExternalId",
					"item": [
						{
							"name": "GetUserByExternalId - Success - LowerCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Item has ExternalId \" + pm.environment.get(\"externalIdLCDefault\"), function () {\r",
											"    pm.expect(jsonData.externalId.toLowerCase()).to.eql(pm.environment.get(\"externalIdLCDefault\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{externalIdLCDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{externalIdLCDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByExternalId - Success - UpperCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Item has ExternalId \" + pm.environment.get(\"externalIdUCDefault\"), function () {\r",
											"    pm.expect(jsonData.externalId.toUpperCase()).to.eql(pm.environment.get(\"externalIdUCDefault\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{externalIdUCDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{externalIdUCDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByExternalId - Invalid ExternalId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has error\", function () {\r",
											"    pm.expect(jsonData.errors.length).to.eql(1);\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"The specified condition was not met for 'Id'.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{externalIdInvalid}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{externalIdInvalid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByExternalId - Non-existing ExternalId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Response has empty body\", function () { \r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{externalIdNonExisting}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{externalIdNonExisting}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetUsers",
					"item": [
						{
							"name": "GetUsers - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let query = {};\r",
											"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response body contains at least 1 item\", function () {     \r",
											"    pm.expect(jsonData.data.length).to.not.be.below(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Current page number equals requested \" + query[\"currentPage\"], function () {    \r",
											"    pm.expect(jsonData.currentPage).to.be.equal(Number(query[\"currentPage\"]));\r",
											"});\r",
											"\r",
											"pm.test(\"Page size equals requested \" + query[\"pageSize\"], function () {    \r",
											"    pm.expect(jsonData.pageSize).to.be.equal(Number(query[\"pageSize\"]));\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains not more than \" + query[\"pageSize\"] + \" items\", function () {    \r",
											"    pm.expect(jsonData.data.length).to.not.be.above(Number(query[\"pageSize\"]));\r",
											"});\r",
											"\r",
											"pm.test('Items are in requested sorted order', () => {\r",
											"    let _ = require('lodash')\r",
											"    let expectedSortedOrder = _.orderBy(jsonData.data, [query[\"orderBy\"].toLowerCase(), query[\"orderAs\"].toLowerCase()]);       \r",
											"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);   \r",
											"});\r",
											"\r",
											"pm.test(\"Id, ExternalId, DisplayName or Email contain search string\", function () {    \r",
											"    const exp = new RegExp(`${query[\"searchTerm\"]}`, 'i');    \r",
											"\r",
											"    pm.expect(\r",
											"        jsonData.data[0].id.match(exp)\r",
											"        || jsonData.data[0].externalId.match(exp)\r",
											"        || jsonData.data[0].displayName.match(exp)\r",
											"        || jsonData.data[0].email.match(exp)).to.be.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users?searchTerm={{searchTermDefault}}&currentPage={{сurrentPageDefault}}&pageSize={{pageSizeDefault}}&orderBy={{orderByDefault}}&orderAs={{orderAsDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{searchTermDefault}}"
										},
										{
											"key": "currentPage",
											"value": "{{сurrentPageDefault}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSizeDefault}}"
										},
										{
											"key": "orderBy",
											"value": "{{orderByDefault}}"
										},
										{
											"key": "orderAs",
											"value": "{{orderAsDefault}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUsers - Success - No items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let query = {};\r",
											"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () { \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response body contains no items\", function () {     \r",
											"    pm.expect(jsonData.data.length).to.eq(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Current page number equals requested \" + query[\"currentPage\"], function () {    \r",
											"    pm.expect(jsonData.currentPage).to.be.equal(Number(query[\"currentPage\"]));\r",
											"});\r",
											"\r",
											"pm.test(\"Page size equals requested \" + query[\"pageSize\"], function () {    \r",
											"    pm.expect(jsonData.pageSize).to.be.equal(Number(query[\"pageSize\"]));\r",
											"});\r",
											"\r",
											"pm.test(\"Row and page counts are 0\", function () {     \r",
											"    pm.expect(jsonData.rowCount).to.eq(0);\r",
											"    pm.expect(jsonData.pageCount).to.eq(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains not more than \" + query[\"pageSize\"] + \" items\", function () {    \r",
											"    pm.expect(jsonData.data.length).to.not.be.above(Number(query[\"pageSize\"]));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users?searchTerm={{searchTermNonExisting}}&currentPage={{сurrentPageDefault}}&pageSize={{pageSizeDefault}}&orderBy={{orderByDefault}}&orderAs={{orderAsDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{searchTermNonExisting}}"
										},
										{
											"key": "currentPage",
											"value": "{{сurrentPageDefault}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSizeDefault}}"
										},
										{
											"key": "orderBy",
											"value": "{{orderByDefault}}"
										},
										{
											"key": "orderAs",
											"value": "{{orderAsDefault}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUsers - Empty query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let query = {};\r",
											"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response body contains no items\", function () {     \r",
											"    pm.expect(jsonData.data).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has error\", function () {\r",
											"    pm.expect(jsonData.errors.length).to.eql(1);\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"PageSize\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Page Size' must be between 1 and 255. You entered 0.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUsers - Invalid query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let query = {};\r",
											"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response body contains no items\", function () {     \r",
											"    pm.expect(jsonData.data).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(jsonData.errors.length).to.eql(3);\r",
											"\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"CurrentPage\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Current Page' must be greater than '0'.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[1].code).to.be.equal(\"PageSize\");\r",
											"    pm.expect(jsonData.errors[1].description).to.be.equal(\"'Page Size' must be between 1 and 255. You entered -10.\");\r",
											"    pm.expect(jsonData.errors[1].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[2].code).to.be.equal(\"OrderAs\");\r",
											"    pm.expect(jsonData.errors[2].description).to.be.equal(\"'Order As' is not in the correct format.\");\r",
											"    pm.expect(jsonData.errors[2].type).to.be.equal(1);    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users?searchTerm={{searchTermEmpty}}&currentPage={{currentPageInvalid}}&pageSize={{pageSizeInvalid}}&orderBy={{orderByDefault}}&orderAs={{orderAsInvalid}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{searchTermEmpty}}"
										},
										{
											"key": "currentPage",
											"value": "{{currentPageInvalid}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSizeInvalid}}"
										},
										{
											"key": "orderBy",
											"value": "{{orderByDefault}}"
										},
										{
											"key": "orderAs",
											"value": "{{orderAsInvalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CreateUser",
					"item": [
						{
							"name": "CreateUser - Empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(jsonData.errors.length).to.eql(7);\r",
											"\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"CreatedBy\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Created By' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[1].code).to.be.equal(\"CreatedBy\");\r",
											"    pm.expect(jsonData.errors[1].description).to.be.equal(\"The specified condition was not met for 'Created By'.\");\r",
											"    pm.expect(jsonData.errors[1].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[2].code).to.be.equal(\"ExternalId\");\r",
											"    pm.expect(jsonData.errors[2].description).to.be.equal(\"'External Id' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[2].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[3].code).to.be.equal(\"ExternalId\");\r",
											"    pm.expect(jsonData.errors[3].description).to.be.equal(\"The specified condition was not met for 'External Id'.\");\r",
											"    pm.expect(jsonData.errors[3].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[4].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[4].description).to.be.equal(\"'Email' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[4].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[5].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[5].description).to.be.equal(\"The specified condition was not met for 'Email'.\");\r",
											"    pm.expect(jsonData.errors[5].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[6].code).to.be.equal(\"DisplayName\");\r",
											"    pm.expect(jsonData.errors[6].description).to.be.equal(\"'Display Name' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[6].type).to.be.equal(1);    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"\",\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"createdBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUser - Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(jsonData.errors.length).to.eql(7);\r",
											"\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"CreatedBy\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Created By' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[1].code).to.be.equal(\"CreatedBy\");\r",
											"    pm.expect(jsonData.errors[1].description).to.be.equal(\"The specified condition was not met for 'Created By'.\");\r",
											"    pm.expect(jsonData.errors[1].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[2].code).to.be.equal(\"ExternalId\");\r",
											"    pm.expect(jsonData.errors[2].description).to.be.equal(\"'External Id' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[2].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[3].code).to.be.equal(\"ExternalId\");\r",
											"    pm.expect(jsonData.errors[3].description).to.be.equal(\"The specified condition was not met for 'External Id'.\");\r",
											"    pm.expect(jsonData.errors[3].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[4].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[4].description).to.be.equal(\"'Email' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[4].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[5].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[5].description).to.be.equal(\"The specified condition was not met for 'Email'.\");\r",
											"    pm.expect(jsonData.errors[5].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[6].code).to.be.equal(\"DisplayName\");\r",
											"    pm.expect(jsonData.errors[6].description).to.be.equal(\"'Display Name' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[6].type).to.be.equal(1);    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUser - Invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(jsonData.errors.length).to.eql(7);\r",
											"\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"CreatedBy\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Created By' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[1].code).to.be.equal(\"CreatedBy\");\r",
											"    pm.expect(jsonData.errors[1].description).to.be.equal(\"The specified condition was not met for 'Created By'.\");\r",
											"    pm.expect(jsonData.errors[1].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[2].code).to.be.equal(\"ExternalId\");\r",
											"    pm.expect(jsonData.errors[2].description).to.be.equal(\"'External Id' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[2].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[3].code).to.be.equal(\"ExternalId\");\r",
											"    pm.expect(jsonData.errors[3].description).to.be.equal(\"The specified condition was not met for 'External Id'.\");\r",
											"    pm.expect(jsonData.errors[3].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[4].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[4].description).to.be.equal(\"'Email' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[4].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[5].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[5].description).to.be.equal(\"The specified condition was not met for 'Email'.\");\r",
											"    pm.expect(jsonData.errors[5].type).to.be.equal(1);    \r",
											"\r",
											"    pm.expect(jsonData.errors[6].code).to.be.equal(\"DisplayName\");\r",
											"    pm.expect(jsonData.errors[6].description).to.be.equal(\"'Display Name' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[6].type).to.be.equal(1);    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"{{externalIdInvalid}}\",\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"createdBy\": \"{{idInvalid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUser - Existing values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 409\", function () { \r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has error\", function () {    \r",
											"    pm.expect(jsonData.code).to.eql(\"User.Exists\");\r",
											"    pm.expect(jsonData.description).to.eql('User with such properties already exists');\r",
											"    pm.expect(jsonData.type).to.eql(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"{{externalIdUCDefault}}\",\r\n    \"displayName\": \"{{displayNameExisting}}\",\r\n    \"email\": \"{{emailExisting}}\",\r\n    \"createdBy\": \"{{idDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateUser",
					"item": [
						{
							"name": "UpdateUser - Empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(jsonData.errors.length).to.eql(3);\r",
											"\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"UpdatedBy\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Updated By' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[1].code).to.be.equal(\"UpdatedBy\");\r",
											"    pm.expect(jsonData.errors[1].description).to.be.equal(\"The specified condition was not met for 'Updated By'.\");\r",
											"    pm.expect(jsonData.errors[1].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[2].code).to.be.equal(\"User.Update\");\r",
											"    pm.expect(jsonData.errors[2].description).to.be.equal(\"No updated values provided\");\r",
											"    pm.expect(jsonData.errors[2].type).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"\",\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"updatedBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUser - Invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () { \r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title of 'Validation error'\", function () {     \r",
											"    pm.expect(jsonData.title).to.be.equal(\"Validation error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has errors\", function () {     \r",
											"    pm.expect(jsonData.errors.length).to.eql(5);\r",
											"\r",
											"    pm.expect(jsonData.errors[0].code).to.be.equal(\"Id\");\r",
											"    pm.expect(jsonData.errors[0].description).to.be.equal(\"'Id' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[0].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[1].code).to.be.equal(\"Id\");\r",
											"    pm.expect(jsonData.errors[1].description).to.be.equal(\"The specified condition was not met for 'Id'.\");\r",
											"    pm.expect(jsonData.errors[1].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[2].code).to.be.equal(\"UpdatedBy\");\r",
											"    pm.expect(jsonData.errors[2].description).to.be.equal(\"'Updated By' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[2].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[3].code).to.be.equal(\"UpdatedBy\");\r",
											"    pm.expect(jsonData.errors[3].description).to.be.equal(\"The specified condition was not met for 'Updated By'.\");\r",
											"    pm.expect(jsonData.errors[3].type).to.be.equal(1);\r",
											"\r",
											"    pm.expect(jsonData.errors[4].code).to.be.equal(\"Email\");\r",
											"    pm.expect(jsonData.errors[4].description).to.be.equal(\"The specified condition was not met for 'Email'.\");\r",
											"    pm.expect(jsonData.errors[4].type).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"{{externalIdInvalid}}\",\r\n    \"displayName\": \"{{displayNameDefault}}\",\r\n    \"email\": \"{{emailInvalid}}\",\r\n    \"updatedBy\": \"{{idInvalid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idInvalid}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idInvalid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUser - Non-existing item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () { \r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"{{externalIdUCDefault}}\",\r\n    \"displayName\": \"{{displayNameDefault}}\",\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"updatedBy\": \"{{idDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idNonExisting}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idNonExisting}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUser - Existing values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let vars = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(\"Status code is 409\", function () { \r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has error\", function () {    \r",
											"    pm.expect(jsonData.code).to.eql(\"User.Exists\");\r",
											"    pm.expect(jsonData.description).to.eql('User with such properties already exists');\r",
											"    pm.expect(jsonData.type).to.eql(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"externalId\": \"{{externalIdUCDefault}}\",\r\n    \"displayName\": \"{{displayNameExisting}}\",\r\n    \"email\": \"{{emailExisting}}\",\r\n    \"updatedBy\": \"{{idDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idDefault}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DeleteUser",
					"item": [
						{
							"name": "DeleteUser - Missing query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () { \r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has JSON body\", function () { \r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has Internal Server Error\", function () {         \r",
											"    pm.expect(jsonData.title).to.eql('Internal Server Error');\r",
											"    pm.expect(jsonData.detail).to.eql('Required parameter \\\"Guid updatedBy\\\" was not provided from query string.');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUser - Non-existing item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () { \r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrlAdmin}}/users/{{idNonExisting}}?updatedBy={{idDefault}}",
									"host": [
										"{{apiUrlAdmin}}"
									],
									"path": [
										"users",
										"{{idNonExisting}}"
									],
									"query": [
										{
											"key": "updatedBy",
											"value": "{{idDefault}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dev",
			"item": [
				{
					"name": "GetUsers - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var vars = JSON.parse(pm.request.body);\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () { \r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response has JSON body\", function () { \r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// const jsonData = pm.response.json();\r",
									"\r",
									"// pm.test(\"Response body contains at least 1 item\", function () {     \r",
									"//     pm.expect(jsonData.data.length).to.not.be.below(1);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response body contains not more than \" + vars.pageSize + \" items\", function () {\r",
									"//     pm.response.to.have.jsonBody(\"data\");\r",
									"//     pm.expect(jsonData.data.length).to.not.be.above(Number(vars.pageSize));\r",
									"// });\r",
									"\r",
									"// pm.test('Items are in requested sorted order', () => {\r",
									"//     var _ = require('lodash')\r",
									"//     var data = JSON.parse(responseBody);\r",
									"    \r",
									"//     var expectedSortedOrder = _.orderBy(data.data, \r",
									"//         [vars.sorts[0].field.toLowerCase(), vars.sorts[1].field.toLowerCase()],\r",
									"//         [vars.sorts[0].order.toUpperCase(), vars.sorts[1].order.toUpperCase()]);    \r",
									"   \r",
									"//    pm.expect(data.data).to.eql(expectedSortedOrder);   \r",
									"// });\r",
									"\r",
									"// pm.test(\"DisplayName or Email or ExternalId contain search string\", function () {    \r",
									"//     const exp = new RegExp(`${vars.searchTerm}`, 'i');    \r",
									"\r",
									"//     pm.expect(\r",
									"//         jsonData.data[0].externalId.match(exp)\r",
									"//         || jsonData.data[0].displayName.match(exp)\r",
									"//         || jsonData.data[0].email.match(exp)).to.be.not.null;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response has no errors\", function () {     \r",
									"//     pm.expect(jsonData.errors.length).to.eql(0);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrlAdmin}}/users?SearchTerm=&isActive=true&currentPage=1&pageSize=10&orderBy=id&orderAs=asc",
							"host": [
								"{{apiUrlAdmin}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "SearchTerm",
									"value": ""
								},
								{
									"key": "isActive",
									"value": "true"
								},
								{
									"key": "currentPage",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "orderBy",
									"value": "id"
								},
								{
									"key": "orderAs",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has JSON body\", function () { \r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Item has Id \" + pm.environment.get(\"defaultId\"), function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(parseInt(pm.environment.get(\"idDefault\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no errors\", function () {     \r",
									"    pm.expect(jsonData.errors.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrlAdmin}}/users/99DCBAF2-4CD6-EE11-BF24-429F38B7F6D5",
							"host": [
								"{{apiUrlAdmin}}"
							],
							"path": [
								"users",
								"99DCBAF2-4CD6-EE11-BF24-429F38B7F6D5"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByExternalId - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has JSON body\", function () { \r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Item has ExternalId \" + pm.environment.get(\"externalIdLCDefault\"), function () {\r",
									"    pm.expect(jsonData.data.externalId.toLowerCase()).to.eq(pm.environment.get(\"externalIdLCDefault\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no errors\", function () {     \r",
									"    pm.expect(jsonData.errors.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrlAdmin}}/users/B047A58C-3019-488E-AA9B-EE70B8257612",
							"host": [
								"{{apiUrlAdmin}}"
							],
							"path": [
								"users",
								"B047A58C-3019-488E-AA9B-EE70B8257612"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var vars = JSON.parse(pm.request.body);\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () { \r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response has JSON body\", function () { \r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// const jsonData = pm.response.json();\r",
									"\r",
									"// pm.test(\"Response body contains no data\", function () {     \r",
									"//     pm.expect(jsonData.data).to.be.null;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response has not errors\", function () {     \r",
									"//     pm.expect(jsonData.errors.length).to.eq(0);    \r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrlAdmin}}/users/E1855D32-A1D5-EE11-BF24-429F38B7F6D5?updatedBy={{idDefault}}",
							"host": [
								"{{apiUrlAdmin}}"
							],
							"path": [
								"users",
								"E1855D32-A1D5-EE11-BF24-429F38B7F6D5"
							],
							"query": [
								{
									"key": "updatedBy",
									"value": "{{idDefault}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var vars = JSON.parse(pm.request.body);\r",
									"\r",
									"// pm.test(\"Status code is 400\", function () { \r",
									"//     pm.response.to.have.status(400);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response has JSON body\", function () { \r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// const jsonData = pm.response.json();\r",
									"\r",
									"// pm.test(\"Response body contains no data\", function () {\r",
									"//     pm.expect(jsonData.data).to.be.null;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response has errors\", function () {\r",
									"//     pm.expect(jsonData.errors.length).to.eql(3);\r",
									"//     pm.expect(jsonData.errors[0].message).to.eql('ExternalId exists.');\r",
									"//     pm.expect(jsonData.errors[1].message).to.eql('DisplayName exists.');\r",
									"//     pm.expect(jsonData.errors[2].message).to.eql('Email exists.');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"externalId\": \"B047A58C-3019-488E-AA9B-EE70B8257613\",\r\n    \"displayName\": \"Very New user\",\r\n    \"email\": \"verynewuser@gmailll.com\",\r\n    \"createdBy\": \"{{idDefault}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrlAdmin}}/users",
							"host": [
								"{{apiUrlAdmin}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var vars = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(\"Status code is 400\", function () { \r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has JSON body\", function () { \r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body contains no data\", function () {\r",
									"    pm.expect(jsonData.data).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has errors\", function () {\r",
									"    pm.expect(jsonData.errors.length).to.eql(3);\r",
									"    pm.expect(jsonData.errors[0].message).to.eql('ExternalId exists.');\r",
									"    pm.expect(jsonData.errors[1].message).to.eql('DisplayName exists.');\r",
									"    pm.expect(jsonData.errors[2].message).to.eql('Email exists.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"externalId\": \"B047A58C-3019-488E-AA9B-EE70B8257615\",\r\n    \"displayName\": \"Very New user2\",\r\n    \"email\": \"verynewuser2@gmailll.com\",\r\n    \"updatedBy\": \"FCF61456-9893-4A12-8178-08DC386DA891\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrlAdmin}}/users/FCF61456-9893-4A12-8178-08DC386DA891",
							"host": [
								"{{apiUrlAdmin}}"
							],
							"path": [
								"users",
								"FCF61456-9893-4A12-8178-08DC386DA891"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}